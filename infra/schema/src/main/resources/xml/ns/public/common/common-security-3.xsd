<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2019 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
            xmlns:s="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            elementFormDefault="qualified"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            Security parts of common schema.
        </xsd:documentation>
    </xsd:annotation>

    <!-- Don't provide schemaLocation here, as it causes xjc to really contact the URIs (!) -->
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"/>
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3"/>
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/query-3"/>
    <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/model/scripting-3"/>

    <xsd:include schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-core-3" />

    <xsd:complexType name="SecurityPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                System that contains definitions of overall security policy.
                It contains configuration of authentication mechanisms, credentials management
                (such as password resets) and so on.
                Please note that this NOT contain authorization and auditing. Authorization is
                defined in roles (see RoleType) and auditing has a separate configuration.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AssignmentHolderType">
                <xsd:sequence>
                    <xsd:element name="authentication" type="tns:AuthenticationsPolicyType" minOccurs="0">
                    </xsd:element>
                    <xsd:element name="credentials" type="tns:CredentialsPolicyType" minOccurs="0">
                    </xsd:element>
                    <xsd:element name="registration" type="tns:RegistrationsPolicyType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:deprecated>true</a:deprecated>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="flow" type="tns:RegistrationsPolicyType" minOccurs="0">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <a:since>3.8</a:since>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="credentialsReset" type="tns:CredentialsResetPolicyType" minOccurs="0">
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="securityPolicy" type="tns:SecurityPolicyType" substitutionGroup="c:object"/>

    <xsd:complexType name="AuthenticationsPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Definition of the use of authentication mechanisms. This is in fact practically
                applicable only in default security policy (the policy that is referenced from
                system configuration).
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="mailAuthentication" type="tns:MailAuthenticationPolicyType" minOccurs="0" maxOccurs="unbounded">
            </xsd:element>
            <xsd:element name="smsAuthentication" type="tns:SmsAuthenticationPolicyType" minOccurs="0" maxOccurs="unbounded">
            </xsd:element>
            <!-- TODO: radovan -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="CredentialsPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Credentials management policy. It specifies the management details for each supported
                credentials type. It defines parameters such as credential lifetime. It may define even
                a very complex schemes for some credential types. E.g. it may define a complete security
                questions.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="default" type="tns:CredentialPolicyType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Common setting applied to all other credentials type. Any of this
                        setting can be overridden in the individual credentials setting.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="password" type="tns:PasswordCredentialsPolicyType" minOccurs="0">
            </xsd:element>
            <xsd:element name="securityQuestions" type="tns:SecurityQuestionsCredentialsPolicyType" minOccurs="0">
            </xsd:element>
            <xsd:element name="nonce" type="tns:NonceCredentialsPolicyType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Nonce settings used to generate one-time random values.
                        Used in self-registration, e-mail-based password reset and possibly also
                        other scenarios.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <!-- More credential types may come here in the future. -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="RegistrationsPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Credentials management policy. It specifies the management details for each supported
                credentials type. It defines parameters such as credential lifetime. It may define even
                a very complex schemes for some credential types. E.g. it may define a complete security
                questions.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="selfRegistration" type="tns:SelfRegistrationPolicyType" minOccurs="0">
            </xsd:element>
            <xsd:element name="postAuthentication" type="tns:SelfRegistrationPolicyType" minOccurs="0">
                <xsd:annotation>
                    <xsd:appinfo>
                        <a:since>3.8</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>

            <!-- More registration types may come here in the future. -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="CredentialsResetPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                <p>
                    Credentials reset management policy. It specifies the management details for each supported
                    credentials reset type. It defines parameters such as reset method.
                </p>
                <p>
                    The idea is that all the password reset mechanisms have the same parts:
                    request, authentication, credential source, delivery.
                    This data structure is meant to configure those steps.
                </p>
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Name of the password reset scheme. This is a short name that acts both as an
                        identifier of the scheme and also as a short name used for diagnostics.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <!-- Later: authentication -->
            <xsd:element name="newCredentialSource" type="tns:CredentialSourceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Source of a new credential value. This setting specifies whether the new credential
                        value should be provided by the user, randomly generated, derived by a key-exchange
                        protocol and so on.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="forceChange" type="xsd:boolean" minOccurs="0" maxOccurs="1" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        If set to true then the new credential will have the forceChange flag set.
                        Which usually means that the user will have to change the credential on next logon.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.7.1</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <!-- Later: delivery -->
            <xsd:element name="securityQuestionReset" type="tns:SecurityQuestionsResetPolicyType" minOccurs="0">
                <!-- This will be deprecated soon -->
            </xsd:element>
            <xsd:element name="mailReset" type="tns:MailResetPolicyType" minOccurs="0">
                <!-- This will be deprecated soon -->
            </xsd:element>
            <xsd:element name="smsReset" type="tns:SmsResetPolicyType" minOccurs="0">
                <!-- This will be deprecated soon -->
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="CredentialSourceType">
        <xsd:annotation>
            <xsd:documentation>
                Source of a new credential value. This setting specifies whether the new credential
                value should be provided by the user, randomly generated, derived by a key-exchange
                protocol and so on.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
                <a:since>3.7.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="userEntry" type="tns:UserEntryCredentialSourceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        New credential value is entered by the user.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <!-- Later: generate, key-exchange, PKI, ... -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="UserEntryCredentialSourceType">
        <xsd:annotation>
            <xsd:documentation>
                Specifies the details of a new credential entered manually by a user.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
                <a:since>3.7.1</a:since>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <!--             <xsd:element name="valuePolicyRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1"> -->
            <!--                 <xsd:annotation> -->
            <!--                     <xsd:documentation> -->
            <!--                      TODO: -->
            <!--                     </xsd:documentation> -->
            <!--                     <xsd:appinfo> -->
            <!--                         <a:objectReferenceTargetType>tns:ValuePolicyType</a:objectReferenceTargetType> -->
            <!--                     </xsd:appinfo> -->
            <!--                 </xsd:annotation> -->
            <!--             </xsd:element> -->
        </xsd:sequence>
    </xsd:complexType>


    <xsd:complexType name="AbstractAuthenticationPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Authentication management policy. It specifies configurations for different authentication methods
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="notificationConfiguration" type="tns:NotificationConfigurationType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        A configuration for user notifications. In future, it might be overridden e.g. at a level
                        of a user.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="name" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="displayName" type="xsd:string" minOccurs="0">
            </xsd:element>
            <!-- More registration types may come here in the future. -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="AbstractCredentialsResetPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Authentication management policy. It specifies configurations for different authentication methods
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="displayName" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="additionalAuthenticationName" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="formRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Reference to form which is displayed for registration
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:FormType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <!-- More registration types may come here in the future. -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="SecurityQuestionsResetPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractCredentialsResetPolicyType">
                <xsd:sequence>

                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="MailResetPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractCredentialsResetPolicyType">
                <xsd:sequence>

                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="SmsResetPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractCredentialsResetPolicyType">
                <xsd:sequence>

                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="MailAuthenticationPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractAuthenticationPolicyType">
                <xsd:sequence>
                    <xsd:element name="mailNonce" type="xsd:string" minOccurs="0">
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="SmsAuthenticationPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractAuthenticationPolicyType">
                <xsd:sequence>
                    <xsd:element name="smsNonce" type="xsd:string" minOccurs="0">
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="AbstractRegistrationPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Credentials management policy. It specifies the management details for each supported
                credentials type. It defines parameters such as credential lifetime. It may define even
                a very complex schemes for some credential types. E.g. it may define a complete security
                questions.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="name" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="initialLifecycleState" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="requiredLifecycleState" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="displayName" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="additionalAuthenticationName" type="xsd:string" minOccurs="0">
            </xsd:element>
            <xsd:element name="defaultRole" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Reference to the default roles which will be assigned to the user automatically after registration
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:AbstractRoleType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <!-- More registration types may come here in the future. -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="SelfRegistrationPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:AbstractRegistrationPolicyType">
                <xsd:sequence>
                    <xsd:element name="formRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reference to form which is displayed for registration
                            </xsd:documentation>
                            <xsd:appinfo>
                                <a:objectReferenceTargetType>tns:FormType</a:objectReferenceTargetType>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="CredentialPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies common elements to all the credential policies.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="storageMethod" type="c:CredentialsStorageMethodType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Method used to store the values of this credential (encrypted, hashed, ...)
                        If storage method is not specified it defaults to encryption
                        (due to compatibility and convenience reasons).
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.6</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="resetMethod" type="c:CredentialsResetMethodType" minOccurs="0" maxOccurs="1">
            </xsd:element>
            <xsd:element name="propagationUserControl" type="c:CredentialsPropagationUserControlType" minOccurs="0" maxOccurs="1" default="userChoice">
                <xsd:annotation>
                    <xsd:documentation>
                        Constraints that define how propagation of the credentials can be controlled by the
                        user. E.g. if user can choose where the password change will be propagated.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="minOccurs" type="xsd:string" minOccurs="0" default="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Minimal number of value occurrences. minOccurs set to zero means that the value
                        is optional.
                        E.g. when applied to passwords the minOccurs=0 means that the policy will
                        accept no password at all. But it will still validate the password using
                        stringPolicy if a password is present.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="maxOccurs" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Maximal number of value occurrences.
                        If not specified then the default schema limitation is imposed.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="maxAge" type="xsd:duration" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Maximum age of the credential, counted from the last credential value update.
                        The credential must not be used after the age is exceeded (it is expired).
                        Any authentication with such credential must fail.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="minAge" type="xsd:duration" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Minimum age of the credential, counted from the last credential value update.
                        The credential cannot be changed before its minimal age is reached.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="warningBeforeExpirationDuration" type="xsd:duration" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        The time interval before credential expiration (exceeded maxAge) that the user will be
                        warned that the credential is about to expire.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lockoutMaxFailedAttempts" type="xsd:int" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Maximum number of failed authentication attempts that can be tried before the credential
                        is locked-out.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lockoutFailedAttemptsDuration" type="xsd:duration" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        The duration in which the failed attempts must happen for the credential to be locked-out.
                        The failed attempt counter is re-set after this duration (counted from the last failed attempt).
                        The credential is NOT locked-out during this duration.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="lockoutDuration" type="xsd:duration" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        The duration for which the credential remains locked-out. The credential is automatically
                        unlocked after this duration.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="valuePolicyRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Reference to the value policy for the credential.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:ValuePolicyType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="historyLength" type="xsd:int" minOccurs="0" maxOccurs="1" default="0">
                <xsd:annotation>
                    <xsd:documentation>
                        The number of entries to keep in the credential history. Also specifies the
                        number of past credential values that will be checked before accepting a new
                        credential change.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="historyStorageMethod" type="c:CredentialsStorageMethodType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Method used to store historical values of the credential (encrypted, hashed, ...)
                        If storage type is not specified then it defaults to hashing.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:since>3.6</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <!-- TODO: similarity criteria (history vs new password) -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="CredentialsPropagationUserControlType">
        <xsd:annotation>
            <xsd:documentation>
                Constraints that define how propagation of credentials can be controlled by the
                user. E.g. if user can choose where the password change will be propagated.
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="mapping">
                <xsd:annotation>
                    <xsd:documentation>
                        Credentials propagation will be determined by the mappings.
                        User cannot choose where the credentials will be propagated.
                        The credentials propagation dialog will not be shown.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="MAPPING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="userChoice">
                <xsd:annotation>
                    <xsd:documentation>
                        The user can choose where the credentials will be propagated.
                        The propagation dialog will be shown.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="USER_CHOICE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CredentialsResetMethodType">
        <xsd:annotation>
            <xsd:documentation>
                Specifies the method of resetting the credential. This usually applies to a
                self-service credential reset.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="resetType" type="c:CredentialsResetTypeType" minOccurs="0" maxOccurs="1" default="none">
                <xsd:annotation>
                    <xsd:documentation>
                        The type of credential reset.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="CredentialsResetTypeType">
        <xsd:annotation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="none">
                <xsd:annotation>
                    <xsd:documentation>
                        Credential reset is disabled.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NONE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="mail">
                <xsd:annotation>
                    <xsd:documentation>
                        Use security questions to reset the credential.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="MAIL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="sms">
                <xsd:annotation>
                    <xsd:documentation>
                        Use security questions to reset the credential.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="SMS"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="securityQuestions">
                <xsd:annotation>
                    <xsd:documentation>
                        Use security questions to reset the credential.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="SECURITY_QUESTIONS"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="securityQuestionsWithEmail">
                <xsd:annotation>
                    <xsd:documentation>
                        Use security questions to reset the credential.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="SECURITY_QUESTIONS_EMAIL"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="CredentialsStorageMethodType">
        <xsd:annotation>
            <xsd:documentation>
                Specifies the method of storing the credential in midPoint.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="storageType" type="c:CredentialsStorageTypeType" minOccurs="0" maxOccurs="1" default="encryption">
                <xsd:annotation>
                    <xsd:documentation>
                        The type of credential storage.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <!-- Storage parameters (ciphers, digest methods, key lengths, ... -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="CredentialsStorageTypeType">
        <xsd:annotation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="encryption">
                <xsd:annotation>
                    <xsd:documentation>
                        Credential will be stored in an encrypted form.
                        This is a symmetric (reversible) encryption.
                        MidPoint will be able to get a cleartext form of
                        the credential if needed.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ENCRYPTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="hashing">
                <xsd:annotation>
                    <xsd:documentation>
                        Credential will be stored in a hashed form.
                        One-way (irreversible) cryptographic hash or key derivation function
                        will be used to transform the credential before storage.
                        MidPoint will NOT be able to get a cleartext form of
                        the credential, but it can still compare credential values.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="HASHING"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="none">
                <xsd:annotation>
                    <xsd:documentation>
                        MidPoint will not store the credential at all.
                        MidPoint will only work with credential in the memory
                        while it is needed to complete current operation.
                        The credential will be discarded after the operation.

                        THIS IS ONLY PARTIALLY SUPPORTED

                        MidPoint should be able not to store the credentials when
                        this setting is used. But there may be side effects
                        that are not completely addressed yet.
                        This is not entirely tested and not supported.
                        Use at your own risk.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NONE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="PasswordCredentialsPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for password management. It is in fact only a simple reference
                to a password policy.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
                <a:schemaMigration>
                    <a:element>tns:passwordPolicyRef</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
                <a:schemaMigration>
                    <a:element>tns:passwordHistoryLength</a:element>
                    <a:version>4.0</a:version>
                    <a:operation>removed</a:operation>
                </a:schemaMigration>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:CredentialPolicyType">
                <xsd:sequence>
                    <xsd:element name="passwordChangeSecurity" type="c:PasswordChangeSecurityType" minOccurs="0" default="oldPassword">
                        <xsd:annotation>
                            <xsd:documentation>
                                Additional security applied when changing a password.
                                This applies when user is changing his own password. It does NOT apply
                                when administrator changes password of other user.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:simpleType name="PasswordChangeSecurityType">
        <xsd:annotation>
            <xsd:documentation>
                Additional security applied when changing a password.
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="none">
                <xsd:annotation>
                    <xsd:documentation>
                        No additional security. Password can be changed by supplying new value.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NONE"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="oldPassword">
                <xsd:annotation>
                    <xsd:documentation>
                        User must supply old password to change the password.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="OLD_PASSWORD"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="SecurityQuestionsCredentialsPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for security questions. It actually contains text for the
                questions (or rather a reference to localization catalog file). But it also contains a policy
                how the questions can be used, e.g. how many questions to display to a user.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:CredentialPolicyType">
                <xsd:sequence>
                    <xsd:element name="questionNumber" type="xsd:int" minOccurs="0"  maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                Number of Questions in order to change the passwords
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="question" type="tns:SecurityQuestionDefinitionType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>
                                The set of all the security questions in this policy.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="SecurityQuestionDefinitionType">
        <xsd:annotation>
            <xsd:documentation>
                Definition of a single security question.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="identifier" type="xsd:anyURI">
                <xsd:annotation>
                    <xsd:documentation>
                        Unique identified of a security question. This can be used in the answer to refer to this
                        definition (see SecurityQuestionAnswerType).

                        It is expected that midPoint will come with a pre-configured set of frequently used security
                        questions (such as "what is your mother's maiden name?"). Therefore URI is a good mechanism for
                        this identifier. URI has a natural namespacing. Which means that the identifiers of built-in
                        questions will not clash with identifiers of questions configured by midPoint administrators.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="enabled" type="xsd:boolean" minOccurs="0" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Simple flag that could be used to disable a use of a specific question without actually
                        deleting it. This may be used to select only some questions, e.g. to disable the low-security
                        built-in questions such as "what is your mother's maiden name?".
                        If not present at all then the question is assumed to be enabled.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="questionText" type="xsd:string" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        The question itself, or the localization identifier to it.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <!-- TODO: sabri
                settings that apply to a specific security question should go here, like this:
                <xsd:element name="something" type="xsd:string" minOccurs="0"/>
                What comes to my mind here is a key to localization file. That definitely should be here.
                What else?
             -->
            <!-- In later versions we may want to add an expression here. The expression could product an expected answer
            to the question. This can work well for questions such as "what is your employee number?". We already store
            employee number in each user therefore there is no need for each user to manually fill-in the expected answer.
            We can use expression instead. Something like "$user/employeeNumber" -->
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="NonceCredentialsPolicyType">
        <xsd:annotation>
            <xsd:documentation>
                Structure that specifies policy for nonce management.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:CredentialPolicyType">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>
                                TODO
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


</xsd:schema>
