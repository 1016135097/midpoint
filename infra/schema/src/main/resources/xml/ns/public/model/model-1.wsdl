<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2013 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<definitions name="model"
    targetNamespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"
    xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:q="http://prism.evolveum.com/xml/ns/public/query-2"
    xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-2a"
    xmlns:apit="http://midpoint.evolveum.com/xml/ns/public/common/api-types-2"
    xmlns:f="http://midpoint.evolveum.com/xml/ns/public/common/fault-1.wsdl"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

    <documentation>

	Interface of the IDM Model subsystem.

	IDM Model Web interface provides access unified to the identity objects stored in the repository and on the resources. It
	abstracts away the details about where and how are the data stored, it hides all the low-level system components.

	Implementation of this interface are expected to enforce a consistency of access control decisions and model, e.g. to enforce
	Role-Based Access Control (RBAC). RBAC is only one of many possibly models and this interface may have many implementations.

	Implementations of this interface may automatically derive properties and attributes for objects. E.g. RBAC models may
	automatically derive resource accounts attributes based on user role membership.

	This a web service version of the IDM Model Interface represented in WSDL. As such it has some inherent limitations but it is
	usable for remote access to the Model services.

    </documentation>

	<import namespace="http://midpoint.evolveum.com/xml/ns/public/common/fault-1.wsdl"
			location="../common/fault-1.wsdl"/>
			
    <types>
        <xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl">
            <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/common/common-2a"
            			schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-2a"/>
            <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/common/api-types-2" 
            			schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/api-types-2"/>
            <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/query-2"
            			schemaLocation="http://prism.evolveum.com/xml/ns/public/query-2"/>
            <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/connector-schema-2"
            			schemaLocation="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/connector-schema-2"/>
            <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/resource/capabilities-2"
            			schemaLocation="http://midpoint.evolveum.com/xml/ns/public/resource/capabilities-2"/>

            <xsd:element name="addObject">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="object" type="c:ObjectType">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Object to be created.
                                    OID attribute of the object may be empty.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="addObjectResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="oid" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>
                                    OID assigned to the created object.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="getObject">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectType" type="xsd:anyURI"/>
                        <xsd:element name="oid" type="xsd:string"/>
                        <xsd:element name="options" type="apit:OperationOptionsType"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="getObjectResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="object" type="c:ObjectType"/>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="listObjects">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectType" type="xsd:anyURI">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Object type to list.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="paging" type="q:PagingType">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Parameters limiting the number of returned entries, offset, etc.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="options" type="apit:OperationOptionsType"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="listObjectsResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectList" type="apit:ObjectListType"/>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="searchObjects">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectType" type="xsd:anyURI"/>
                        <xsd:element name="query" type="q:QueryType">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Search criteria
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="options" type="apit:OperationOptionsType"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="searchObjectsResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectList" type="apit:ObjectListType"/>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="modifyObject">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectType" type="xsd:anyURI"/>
                        <xsd:element name="objectChange" type="apit:ObjectModificationType"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="modifyObjectResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="deleteObject">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="objectType" type="xsd:anyURI"/>
                        <xsd:element name="oid" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="deleteObjectResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="listAccountShadowOwner">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="accountOid" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="listAccountShadowOwnerResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="user" type="c:UserType"/>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="listResourceObjectShadows">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="resourceOid" type="xsd:string"/>
                        <xsd:element name="resourceObjectShadowType" type="xsd:anyURI"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="listResourceObjectShadowsResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="resourceObjectShadowList" type="apit:ResourceObjectShadowListType"/>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="testResource">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="resourceOid" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="testResourceResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="result" type="c:OperationResultType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <xsd:element name="importFromResource">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="resourceOid" type="xsd:string"/>
                        <xsd:element name="objectClass" type="xsd:QName">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Object class to import.
                                    Local name, assumed to be in the resource namespace.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="importFromResourceResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="task" type="c:TaskType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            
                 <xsd:element name="notifyChange">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="changeDescription" type="c:ResourceObjectShadowChangeDescriptionType"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="notifyChangeResponse">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="task" type="c:TaskType" />
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>

            <!--<xsd:element name="executeMslCommand">-->
                <!--<xsd:complexType>-->
                    <!--<xsd:sequence>-->
                        <!--<xsd:element name="command" type="xsd:string"/>-->
                        <!--<xsd:element name="environment" type="xsd:string"/>-->
                    <!--</xsd:sequence>-->
                <!--</xsd:complexType>-->
            <!--</xsd:element>-->
            <!--<xsd:element name="executeMslCommandResponse">-->
                <!--<xsd:complexType>-->
                    <!--<xsd:sequence>-->
                        <!--<xsd:element name="responses" type="apit:ExecuteMslCommandResponsesType" />-->
                        <!--<xsd:element name="result" type="c:OperationResultType" />-->
                    <!--</xsd:sequence>-->
                <!--</xsd:complexType>-->
            <!--</xsd:element>-->

            <!--<xsd:element name="getSchemas">-->
                <!--<xsd:complexType>-->
                    <!--<xsd:sequence>-->
                        <!--<xsd:element name="prefixMapping" type="apit:PrefixMappingType"/>-->
                    <!--</xsd:sequence>-->
                <!--</xsd:complexType>-->
            <!--</xsd:element>-->
            <!--<xsd:element name="getSchemasResponse">-->
                <!--<xsd:complexType>-->
                    <!--<xsd:sequence>-->
                        <!--<xsd:element name="schemas" type="apit:SchemaFilesType"/>-->
                    <!--</xsd:sequence>-->
                <!--</xsd:complexType>-->
            <!--</xsd:element>-->

        </xsd:schema>
    </types>

    <!-- OBJECT messages -->

    <!-- Common messages
         Following messages should be in a separate WSDL file and imported here.
         But that does not work on OpenESB. Therefore good old copy&paste
         instead of import -->

	<message name="addObject">
        <part name="addObject" element="tns:addObject" />
    </message>
    <message name="addObjectResponse">
        <part name="addObjectResponse" element="tns:addObjectResponse" />
    </message>

    <message name="getObject">
        <part name="parameters" element="tns:getObject" />
    </message>
    <message name="getObjectResponse">
        <part name="parameters" element="tns:getObjectResponse" />
    </message>

    <message name="listObjects">
        <part name="parameters" element="tns:listObjects" />
    </message>
    <message name="listObjectsResponse">
        <part name="parameters" element="tns:listObjectsResponse" />
    </message>

    <message name="searchObjects">
        <part name="parameters" element="tns:searchObjects" />
    </message>
    <message name="searchObjectsResponse">
        <part name="parameters" element="tns:searchObjectsResponse" />
    </message>

    <message name="modifyObject">
        <part name="parameters" element="tns:modifyObject" />
    </message>
    <message name="modifyObjectResponse">
        <part name="parameters" element="tns:modifyObjectResponse" />
    </message>

    <message name="deleteObject">
        <part name="parameters" element="tns:deleteObject" />
    </message>
    <message name="deleteObjectResponse">
        <part name="parameters" element="tns:deleteObjectResponse" />
    </message>

    <!-- End of common messages -->

    <message name="listAccountShadowOwner">
        <part name="parameters" element="tns:listAccountShadowOwner" />
    </message>
    <message name="listAccountShadowOwnerResponse">
        <part name="parameters" element="tns:listAccountShadowOwnerResponse" />
    </message>

    <message name="listResourceObjectShadows">
        <part name="parameters" element="tns:listResourceObjectShadows" />
    </message>
    <message name="listResourceObjectShadowsResponse">
        <part name="parameters" element="tns:listResourceObjectShadowsResponse" />
    </message>

    <message name="testResource">
        <part name="parameters" element="tns:testResource" />
    </message>
    <message name="testResourceResponse">
        <part name="parameters" element="tns:testResourceResponse" />
    </message>

    <message name="importFromResource">
        <part name="parameters" element="tns:importFromResource" />
    </message>
    <message name="importFromResourceResponse">
        <part name="parameters" element="tns:importFromResourceResponse" />
    </message>
    
    <message name="notifyChange">
        <part name="parameters" element="tns:notifyChange" />
    </message>
    <message name="notifyChangeResponse">
        <part name="parameters" element="tns:notifyChangeResponse" />
    </message>

    <!--<message name="executeMslCommand">-->
        <!--<part name="parameters" element="tns:executeMslCommand" />-->
    <!--</message>-->
    <!--<message name="executeMslCommandResponse">-->
        <!--<part name="parameters" element="tns:executeMslCommandResponse" />-->
    <!--</message>-->

    <!--<message name="getSchemas">-->
        <!--<part name="parameters" element="tns:getSchemas" />-->
    <!--</message>-->
    <!--<message name="getSchemasResponse">-->
        <!--<part name="parameters" element="tns:getSchemasResponse" />-->
    <!--</message>-->

    <portType name="modelPortType">

        <!-- OBJECT operations -->

        <operation name="addObject">
            <documentation>
                Add new object.

                The OID provided in the input message may be empty. In that case
                the OID will be assigned by the implementation of this method
                and it will be provided as return value.

                This operation should fail if such object already exists (if
                object with the provided OID already exists).

                The operation may fail if provided OID is in an unusable format
                for the storage. Generating own OIDs and providing them to this
                method is not recommended for normal operation.

                Should be atomic. Should not allow creation of two objects with
                the same OID (even if created in parallel).

                The operation may fail if the object to be created does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                Faults:
                  any SystemFaultType
                  ObjectAlreadyExistsFaultType
                  IllegalArgumentFaultType: wrong OID format
                  SchemaViolationFaultType: provided object violates datastore schema
            </documentation>
            <input name="addObjectInput" message="tns:addObject"/>
            <output name="addObjectOutput" message="tns:addObjectResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="getObject">
            <documentation>
                    Returns object for provided OID.
                    Must fail if object with the OID does not exists.

                    Reference resolution is SUPPORTED by this operation.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="getObjectInput" message="tns:getObject"/>
            <output name="getObjectOutput" message="tns:getObjectResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="listObjects">
            <documentation>
                    Returns all objects of specified type in the repository.
                    Not very practical, but good for now.
                    Will be improved later.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
            </documentation>
            <input name="listObjectsInput" message="tns:listObjects"/>
            <output name="listObjectsOutput" message="tns:listObjectsResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="searchObjects">
            <documentation>
                    Search for objects in the repository. Searches through all
                    object types. Returns a list of objects that match search
                    criteria.

                    Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong object type
                      SchemaViolationFaultType: unknown property used in search query
            </documentation>
            <input name="searchObjectsInput" message="tns:searchObjects"/>
            <output name="searchObjectsOutput" message="tns:searchObjectsResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="modifyObject">
            <documentation>
                Modifies object using relative change description.
                Must fail if user with provided OID does not exists.
                Must fail if any of the described changes cannot be applied.
                Should be atomic.

                If two or more modify operations are executed in parallel, the
                operations should be merged. In case that the operations are in
                conflict (e.g. one operation adding a value and the other
                removing the same value), the result is not deterministic.

                The operation may fail if the modified object does not
                comform to the underlying schema of the storage system or the
                schema enforced by the implementation.

                TODO: optimistic locking

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
                      InapplicableOperationFaultType: decribed change is not applicable
                      SchemaViolationFaultType: resulting object would violate datastore schema
            </documentation>
            <input name="modifyObjectInput" message="tns:modifyObject"/>
            <output name="modifyObjectOutput" message="tns:modifyObjectResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="deleteObject">
            <documentation>
                    Deleted object with provided OID.
                    Must fail if object with specified OID does not exists.
                    Should be atomic.

                    Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: object with specified OID does not exists
                      IllegalArgumentFaultType: wrong OID format
            </documentation>
            <input name="deleteObjectInput" message="tns:deleteObject"/>
            <output name="deleteObjectOutput" message="tns:deleteObjectResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <!-- Type-specific operations -->

        <operation name="listAccountShadowOwner">
            <documentation>
                Returns the User object representing owner of specified account
                (account shadow).
                May return (null?? empty??) object if there is no owner
                specified for the account.

                Implements the backward "owns" association between account
                shadow and user. Forward association is implemented by property
                "account" of user object.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listAccountShadowOwnerInput" message="tns:listAccountShadowOwner"/>
            <output name="listAccountShadowOwnerOutput" message="tns:listAccountShadowOwnerResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="listResourceObjectShadows">
            <documentation>
                Search for resource object shadows of a specified type that
                belong to the specified resource. Returns a list of such object
                shadows or empty list if nothing was found.

                Implements the backward "has" association between resource and
                resource object shadows. Forward association is implemented by
                property "resource" of resource object shadow.

                Faults:
                      any SystemFaultType
                      IllegalArgumentFaultType: wrong OID format
                      ObjectNotFoundFaultType: object with specified OID does not exists
            </documentation>
            <input name="listResourceObjectShadowsInput" message="tns:listResourceObjectShadows"/>
            <output name="listResourceObjectShadowsOutput" message="tns:listResourceObjectShadowsResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="testResource">
            <documentation>
                WARNING:
                This operation should not be here. It is in fact
                just a diagnostics methods from the provisioning interface
                that need to be accessed from GUI. Do not use it for
                anything serious. It will disappear eventually.

                Test the resouce connection and basic resource connector
                functionality.

                This operation will NOT raise fault in case the resource
                connection fails. It such case it will indicate the failure in
                the return message, but the operation itself succeeds.
                The operations fails only if the provided arguments are wrong,
                in case of system error, system misconfiguration, etc.

                Faults:
                any SystemFaultType
                ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="testResourceInput" message="tns:testResource"/>
            <output name="testResourceOutput" message="tns:testResourceResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <operation name="importFromResource">
            <documentation>
            	TODO: update description
            	
                Launch import task that will import all the accounts from the
                resource.

                WARNING: This operation is not considered public. It is a
                temporary solution until we have full-featured task management.
                It may be removed any time without a warning.

                DO NOT USE IT unless you are really sure you know what you
                are doing.

                Faults:
                      any SystemFaultType
                      ObjectNotFoundFaultType: specified Resource definition does not exist
            </documentation>
            <input name="importFromResourceInput" message="tns:importFromResource"/>
            <output name="importFromResourceOutput" message="tns:importFromResourceResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

<operation name="notifyChange">
            <documentation>
            	TODO: update description
            	
               Trigger change notification.
            </documentation>
            <input name="notifyChangeInput" message="tns:notifyChange"/>
            <output name="notifyChangeOutput" message="tns:notifyChangeResponse"/>
            <fault name="fault" message="f:FaultMessage"/>
        </operation>

        <!--<operation name="executeMslCommand">-->
            <!--<documentation>-->
            <!--</documentation>-->
            <!--<input name="executeMslCommandInput" message="tns:executeMslCommand"/>-->
            <!--<output name="executeMslCommandOutput" message="tns:executeMslCommandResponse"/>-->
            <!--<fault name="fault" message="f:FaultMessage"/>-->
        <!--</operation>-->

        <!--<operation name="getSchemas">-->
            <!--<documentation>-->
            <!--</documentation>-->
            <!--<input name="getSchemasInput" message="tns:getSchemas"/>-->
            <!--<output name="getSchemasOutput" message="tns:getSchemasResponse"/>-->
            <!--<fault name="fault" message="f:FaultMessage"/>-->
        <!--</operation>-->

    </portType>

    <binding name="modelBinding" type="tns:modelPortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="addObject">
            <soap:operation/>
            <input name="addObjectInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="addObjectOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="getObject">
            <soap:operation/>
            <input name="getObjectInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="getObjectOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listObjects">
            <soap:operation/>
            <input name="listObjectsInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="listObjectsOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="searchObjects">
            <soap:operation/>
            <input name="searchObjectsInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="searchObjectsOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="modifyObject">
            <soap:operation/>
            <input name="modifyObjectInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="modifyObjectOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteObject">
            <soap:operation/>
            <input name="deleteObjectInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="deleteObjectOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listAccountShadowOwner">
            <soap:operation/>
            <input name="listAccountShadowOwnerInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="listAccountShadowOwnerOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="listResourceObjectShadows">
            <soap:operation/>
            <input name="listResourceObjectShadowsInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="listResourceObjectShadowsOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="testResource">
            <soap:operation/>
            <input name="testResourceInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="testResourceOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="importFromResource">
            <soap:operation/>
            <input name="importFromResourceInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="importFromResourceOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <operation name="notifyChange">
            <soap:operation/>
            <input name="notifyChangeInput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </input>
            <output name="notifyChangeOutput">
                <soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>
            </output>
            <fault name="fault">
                <soap:fault name="fault" use="literal"/>
            </fault>
        </operation>
        <!--<operation name="executeMslCommand">-->
            <!--<soap:operation/>-->
            <!--<input name="executeMslCommandInput">-->
                <!--<soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>-->
            <!--</input>-->
            <!--<output name="executeMslCommandOutput">-->
                <!--<soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>-->
            <!--</output>-->
            <!--<fault name="fault">-->
                <!--<soap:fault name="fault" use="literal"/>-->
            <!--</fault>-->
        <!--</operation>-->

        <!--<operation name="getSchemas">-->
            <!--<soap:operation/>-->
            <!--<input name="getSchemasInput">-->
                <!--<soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>-->
            <!--</input>-->
            <!--<output name="getSchemasOutput">-->
                <!--<soap:body use="literal" namespace="http://midpoint.evolveum.com/xml/ns/public/model/model-1.wsdl"/>-->
            <!--</output>-->
            <!--<fault name="fault">-->
                <!--<soap:fault name="fault" use="literal"/>-->
            <!--</fault>-->
        <!--</operation>-->
    </binding>
</definitions>



