<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  ~ Copyright (c) 2010-2013 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<systemConfiguration oid="00000000-0000-0000-0000-000000000001" version="0"
	xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-2a"
	xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-2a">
    <name>SystemConfiguration</name>
    <modelHooks>
    	<change>
    		<hook>
    			<name>foo</name>
    			<script>
    				<code>
    					import com.evolveum.midpoint.prism.delta.*;
    					import com.evolveum.midpoint.xml.ns._public.common.common_2a.*;
    					import com.evolveum.midpoint.model.api.context.ModelState;
    					
    					log.info('FOO HOOK WAS HERE: ' + modelContext)
    					log.info('focus='+focus+", "+focus.getClass())
    					
    					if (focus instanceof UserType &amp;&amp; modelContext.getState() == ModelState.PRIMARY) {
    						UserType user = (UserType)focus;
    						organizations = user.getOrganization();
    						log.info("orgs="+organizations);
    						for (orgName in organizations) {
    							log.info("orgName="+orgName)
    							org = midpoint.searchObjectByName(OrgType.class, orgName)
    							log.info("org="+org)
    							if (org == null) {
    								// Org does not exist, lets create it
    								org = midpoint.createEmptyObjectWithName(OrgType.class, orgName);
    								topOrgRef = new ObjectReferenceType();
    								topOrgRef.setOid('80808080-8888-6666-0000-100000000001');
    								org.getParentOrgRef().add(topOrgRef);
    								midpoint.addObject(org);
    								log.info("org "+org+" created")
    							}
    							if (!midpoint.isDirectlyAssigned(org)) {
    								// The org is not assigned. Let's assign it.
    								log.info("BAR BAR BAR Not assigned")
    								// We need to construct a delta to do this
    								assignment = new AssignmentType();
    								orgTarget = new ObjectReferenceType();
    								orgTarget.setOid(org.getOid());
    								assignment.setTargetRef(orgTarget);
    								assignmentDelta = ContainerDelta.createModificationAdd(UserType.F_ASSIGNMENT, UserType.class, prismContext, assignment);
    								modelContext.getFocusContext().swallowToPrimaryDelta(assignmentDelta);
    								// This forces complete recompute of context in next stage
    								modelContext.rot();
    							}
    						}
    					}
    				</code>
    			</script>
    		</hook>
    	</change>
    </modelHooks>
    <logging>
    	<rootLoggerAppender>File Appender</rootLoggerAppender>
    	<rootLoggerLevel>INFO</rootLoggerLevel>
        <classLogger>
	        <level>TRACE</level>
	        <package>com.evolveum.midpoint.common.LoggingConfigurationManager</package>
      	</classLogger>
        <c:classLogger>
            <c:level>TRACE</c:level>
            <c:package>com.evolveum.midpoint.notifications</c:package>
        </c:classLogger>
        <appender xsi:type="c:FileAppenderConfigurationType" name="File Appender" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <pattern>%date [%thread] %-5level \(%logger{46}\): %message%n</pattern>
            <fileName>target/test.log</fileName>
            <append>true</append>
        </appender>
    </logging>
    <notificationConfiguration>
        <!--<dummyNotifier name="newAccounts">-->
            <!--<categoryFilter><category>accountEvent</category></categoryFilter>-->
            <!--<operationFilter><operation>add</operation></operationFilter>-->
            <!--<statusFilter><status>success</status></statusFilter>-->
        <!--</dummyNotifier>-->
        <!--<dummyNotifier name="newAccountsViaExpression">-->
            <!--<expressionFilter>-->
                <!--<expression>-->
                    <!--<script>-->
                        <!--<code>event.isAccountRelated() &amp;&amp; event.isAdd() &amp;&amp; event.isSuccess()</code>-->
                    <!--</script>-->
                <!--</expression>-->
            <!--</expressionFilter>-->
        <!--</dummyNotifier>-->
        <accountPasswordNotifier>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:accountPasswordNotifier</transport>
        </accountPasswordNotifier>
        <userPasswordNotifier>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:userPasswordNotifier</transport>
        </userPasswordNotifier>
        <simpleAccountNotifier>
            <statusFilter><status>success</status></statusFilter>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:simpleAccountNotifier-SUCCESS</transport>
        </simpleAccountNotifier>
        <simpleAccountNotifier>
            <statusFilter><status>failure</status></statusFilter>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:simpleAccountNotifier-FAILURE</transport>
        </simpleAccountNotifier>
        <simpleAccountNotifier>
            <operationFilter><operation>add</operation></operationFilter>
            <statusFilter><status>success</status></statusFilter>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:simpleAccountNotifier-ADD-SUCCESS</transport>
        </simpleAccountNotifier>
        <simpleAccountNotifier>
            <operationFilter><operation>delete</operation></operationFilter>
            <statusFilter><status>success</status></statusFilter>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:simpleAccountNotifier-DELETE-SUCCESS</transport>
        </simpleAccountNotifier>
        <simpleUserNotifier>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:simpleUserNotifier</transport>
        </simpleUserNotifier>
        <handlerChain>
            <operationFilter><operation>add</operation></operationFilter>
            <simpleUserNotifier>
                <recipientExpression>
                    <value>recipient@evolveum.com</value>
                </recipientExpression>
                <transport>dummy:simpleUserNotifier-ADD</transport>
            </simpleUserNotifier>
        </handlerChain>
        <handlerChain>
            <operationFilter><operation>delete</operation></operationFilter>
            <simpleUserNotifier>
                <recipientExpression>
                    <value>recipient@evolveum.com</value>
                </recipientExpression>
                <transport>dummy:simpleUserNotifier-DELETE</transport>
            </simpleUserNotifier>
        </handlerChain>
        <simpleUserNotifier>
            <statusFilter><status>failure</status></statusFilter>
            <recipientExpression>
                <value>recipient@evolveum.com</value>
            </recipientExpression>
            <transport>dummy:simpleUserNotifier-FAILURE</transport>
        </simpleUserNotifier>
        <mail>
            <redirectToFile>target/mail-notifications.log</redirectToFile>
        </mail>
    </notificationConfiguration>
</systemConfiguration>
