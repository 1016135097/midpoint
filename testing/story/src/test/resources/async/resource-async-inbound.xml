<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2020 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<resource oid="6628a329-4b29-4f3a-9339-8fa12c59c38f"
          xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
          xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
          xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3"
          xmlns:conf="http://midpoint.evolveum.com/xml/ns/public/connector/builtin-1/bundle/com.evolveum.midpoint.provisioning.ucf.impl.builtin.async.update/AsyncUpdateConnector">

    <name>async-inbound</name>
    <connectorRef type="ConnectorType">
        <filter>
            <q:equal>
                <q:path>connectorType</q:path>
                <q:value>AsyncUpdateConnector</q:value>
            </q:equal>
        </filter>
    </connectorRef>
    <connectorConfiguration>
        <conf:sources>
            <jms>
                <connectionFactory>invmConnectionFactory</connectionFactory>
                <destination>ProvisioningQueue</destination>
            </jms>
        </conf:sources>
        <conf:transformExpression>
            <script>
                <code>
                    import com.evolveum.midpoint.provisioning.ucf.impl.builtin.async.provisioning.JsonRequest
                    import com.evolveum.midpoint.xml.ns._public.common.common_3.*
                    import com.evolveum.prism.xml.ns._public.types_3.*

                    import javax.xml.namespace.QName

                    import static com.evolveum.midpoint.schema.constants.MidPointConstants.*
                    import static com.evolveum.midpoint.schema.constants.SchemaConstants.*
                    import com.evolveum.midpoint.schema.util.*
                    import com.evolveum.midpoint.prism.path.*

                    import static com.evolveum.prism.xml.ns._public.types_3.ModificationTypeType.*

                    String text = midpoint.wrap(message).text
                    log.info('Message text:\n{}', text)

                    // Quite a hack (using internal structure of AsyncProvisioning connector)
                    request = JsonRequest.from(text)

                    if (request.operation == 'add') {
                        qualifiedAttributes = request.attributes.collectEntries { name, value -> [new QName(NS_RI, name), value] }
                        log.info('Qualified attributes:\n{}', qualifiedAttributes)
                        return UcfChangeUtil.createForNewObject(RI_ACCOUNT_OBJECT_CLASS, qualifiedAttributes, prismContext)
                    }

                    qualifiedIdentifiers = request.primaryIdentifiers.collectEntries { name, value -> [new QName(NS_RI, name), value] }
                    ObjectDeltaType delta = new ObjectDeltaType()

                    if (request.operation == 'delete') {
                        delta.changeType = ChangeTypeType.DELETE
                        return UcfChangeUtil.create(RI_ACCOUNT_OBJECT_CLASS, qualifiedIdentifiers, delta, prismContext)
                    } else if (request.operation == 'modify') {
                        delta.changeType = ChangeTypeType.MODIFY
                        for (entry in request.changes.entrySet()) {
                            path = new ItemPathType(ItemPath.create(ShadowType.F_ATTRIBUTES, new QName(NS_RI, entry.key)))
                            JsonRequest.DeltaValues deltaValues = entry.value
                            if (deltaValues.replace != null) {
                                delta.itemDelta.add(createItemDelta(REPLACE, path, deltaValues.replace))
                            } else {
                                if (deltaValues.add != null &amp;&amp; !deltaValues.add.isEmpty()) {
                                    delta.itemDelta.add(createItemDelta(ADD, path, deltaValues.add))
                                }
                                if (deltaValues.delete != null &amp;&amp; !deltaValues.delete.isEmpty()) {
                                    delta.itemDelta.add(createItemDelta(DELETE, path, deltaValues.delete))
                                }
                            }
                        }
                        return UcfChangeUtil.create(RI_ACCOUNT_OBJECT_CLASS, qualifiedIdentifiers, delta, prismContext)
                    } else {
                        log.error('Unsupported operation: {}', operation)
                        return null
                    }

                    private ItemDeltaType createItemDelta(ModificationTypeType type, ItemPathType path, Collection values) {
                        itemDelta = new ItemDeltaType()
                        itemDelta.modificationType = type
                        itemDelta.path = path
                        for (value in values) {
                            itemDelta.value.add(RawType.fromPropertyRealValue(value, null, prismContext))
                        }
                        itemDelta
                    }
                </code>
            </script>
        </conf:transformExpression>
    </connectorConfiguration>
    <schema>
        <definition>
            <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
                        xmlns:ra="http://midpoint.evolveum.com/xml/ns/public/resource/annotation-3"
                        targetNamespace="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3">
                <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"/>
                <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"/>
                <xsd:import namespace="http://midpoint.evolveum.com/xml/ns/public/resource/annotation-3"/>
                <xsd:complexType name="AccountObjectClass">
                    <xsd:annotation>
                        <xsd:appinfo>
                            <ra:resourceObject/>
                            <ra:identifier>ri:login</ra:identifier>
                            <ra:displayNameAttribute>ri:login</ra:displayNameAttribute>
                            <ra:namingAttribute>ri:login</ra:namingAttribute>
                            <ra:kind>account</ra:kind>
                            <ra:default/>
                        </xsd:appinfo>
                    </xsd:annotation>
                    <xsd:sequence>
                        <xsd:element name="login" type="xsd:string" minOccurs="0"/>
                        <xsd:element name="fullName" type="xsd:string" minOccurs="0"/>
                        <xsd:element name="description" type="xsd:string" minOccurs="0"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:schema>
        </definition>
    </schema>
    <schemaHandling>
        <objectType>
            <objectClass>ri:AccountObjectClass</objectClass>
            <attribute>
                <ref>ri:description</ref>
                <inbound>
                    <strength>strong</strength>
                    <target>
                        <path>description</path>
                    </target>
                </inbound>
            </attribute>
        </objectType>
    </schemaHandling>
    <capabilities>
        <configured xmlns:cap="http://midpoint.evolveum.com/xml/ns/public/resource/capabilities-3">
            <cap:read>
                <cap:cachingOnly>true</cap:cachingOnly>
            </cap:read>
        </configured>
    </capabilities>
    <synchronization>
        <objectSynchronization>
            <enabled>true</enabled>
            <objectClass>ri:AccountObjectClass</objectClass>
            <kind>account</kind>
            <intent>default</intent>
            <correlation>
                <q:equal>
                    <q:path>name</q:path>
                    <expression>
                        <path>$projection/attributes/ri:login</path>
                    </expression>
                </q:equal>
            </correlation>
            <reaction>
                <situation>linked</situation>
                <synchronize>true</synchronize>
            </reaction>
            <reaction>
                <situation>deleted</situation>
                <synchronize>true</synchronize>
                <action>
                    <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#unlink</handlerUri>
                </action>
            </reaction>
            <reaction>
                <situation>unlinked</situation>
                <synchronize>true</synchronize>
                <action>
                    <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#link</handlerUri>
                </action>
            </reaction>
            <reaction>
                <situation>unmatched</situation>
                <synchronize>true</synchronize>
                <action>
                    <handlerUri>http://midpoint.evolveum.com/xml/ns/public/model/action-3#addFocus</handlerUri>
                </action>
            </reaction>
        </objectSynchronization>
    </synchronization>
</resource>
