<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2010-2017 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<role xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
	  xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
	  xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
		oid="db0eadd1-3e2b-4dad-801e-80700f2d11e5">
	<name>k10</name>
	<inducement>
		<policyRule>
			<policyConstraints>
				<objectState>
					<expression>
						<script>
							<code>
								log.info('### Evaluating rule on {}', object)
								//this.binding.variables.each {k,v -> log.info('{} = {}', k, v)}
								def path = ruleEvaluationContext.policyRule.assignmentPath
								log.info('### Assignment path:\n{}', path.debugDump())
								def extension = path.collectExtensions(1)
								log.info('### Extension:\n{}', extension?.asPrismContainerValue().debugDump())

								for (int i = 1; i &lt; 10; i++) {
									def attribute = basic.getPropertyValue(extension, "attribute$i")
									def expectedValue = basic.getPropertyValue(extension, "value$i")
									if (attribute != null) {
										def realValue = basic.getPropertyValue(object, attribute)
										log.info('*** checking {}: expected: "{}", real: "{}"', attribute, expectedValue, realValue)
										if (!Objects.equals(expectedValue, realValue)) {
											return true
										}
									}
								}
								return false
							</code>
						</script>
					</expression>
				</objectState>
			</policyConstraints>
			<policyActions>
				<enforcement>
					<condition>
						<script>
							<code>
								def extension = ruleEvaluationContext.policyRule.assignmentPath.collectExtensions(1)
								log.info('### enforcement:Extension:\n{}', extension?.asPrismContainerValue().debugDump())
								def remediatorRef = basic.getPropertyValue(extension, "remediatorRef")
								log.info('### enforcement:remediatorRef = {}', remediatorRef)
								remediatorRef == null
							</code>
						</script>
					</condition>
				</enforcement>
				<approval>
					<condition>
						<script>
							<code>
								def extension = ruleEvaluationContext.policyRule.assignmentPath.collectExtensions(1)
								log.info('### approval:Extension:\n{}', extension?.asPrismContainerValue().debugDump())
								def remediatorRef = basic.getPropertyValue(extension, "remediatorRef")
								log.info('### approval:remediatorRef = {}', remediatorRef)
								remediatorRef != null
							</code>
						</script>
					</condition>
					<approvalSchema>
						<stage>
							<approverExpression>
								<script>
									<code>
										import com.evolveum.midpoint.schema.util.*
										log.info('### workflow context:\n{}', workflowContext.asPrismContainerValue().debugDump())
										def rules = WfContextUtil.getRulesForStage(workflowContext, stageDefinition.number)
										log.info('rules found: {}', rules)
										def approvers = rules.collectMany { rule ->
											def ext = midpoint.collectExtensions(rule.assignmentPath, 1)
											def remediatorRef = basic.getPropertyValue(ext, "remediatorRef")
											remediatorRef != null ? [remediatorRef.clone()] : []
										}
										log.info('approvers found: {}', approvers)
										approvers
									</code>
								</script>
							</approverExpression>
						</stage>
					</approvalSchema>
				</approval>
			</policyActions>
			<evaluationTarget>assignment</evaluationTarget>
		</policyRule>
		<order>2</order>
	</inducement>
</role>